// This is your Prisma schema file for the SmartRecycle application.
// It defines the database models, relations, and constraints.

// 1. Set up the datasource to connect to your PostgreSQL database via Supabase.
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 2. Set up the Prisma Client generator.
generator client {
  provider = "prisma-client-js"
}

// ---------------------------
// ENUMS
// ---------------------------

enum Role {
  HOUSEHOLD
  COLLECTOR
  ADMIN
}

enum AlertStatus {
  PENDING
  CLAIMED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

enum WasteType {
  GENERAL
  RECYCLABLE
  E_WASTE
  ORGANIC
  HAZARDOUS
  CONSTRUCTION_DEBRIS
  MEDICAL
  PLASTIC
  PAPER
  METAL
  GLASS
  BULBS_LIGHTING
  SANITARY_WASTE
}

// ADDED: Enum for the status of a problem report
enum ReportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}


// ---------------------------
// MODELS
// ---------------------------

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  role             Role
  phone            String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  householdProfile HouseholdProfile?
  collectorProfile CollectorProfile?
  alertsCreated    WasteAlert[]      @relation("AlertsCreatedByUser")
  reviewsGiven     Review[]          @relation("ReviewsGivenByUser")
  
  // ADDED: A user can submit many problem reports
  problemReports   ProblemReport[]   @relation("ReportedByUser")
}

model HouseholdProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  dateOfBirth DateTime @db.Date
  address     String   @db.Text
  latitude    Float?
  longitude   Float?
}

model CollectorProfile {
  id                  String      @id @default(cuid())
  userId              String      @unique
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                String
  address             String      @db.Text
  latitude            Float?
  longitude           Float?
  identityDocumentUrl String
  isVerified          Boolean     @default(false)
  vehicleDetails      String?
  acceptedWasteTypes  WasteType[]
  alertsClaimed       WasteAlert[] @relation("AlertsClaimedByCollector")
  reviewsReceived     Review[]    @relation("ReviewsReceivedByCollector")
  rejections          AlertRejection[]
}

model WasteAlert {
  id              String      @id @default(cuid())
  status          AlertStatus @default(PENDING)
  wasteType       WasteType
  description     String?     @db.Text
  imageUrl        String?
  weightEstimate  Float?
  pickupAddress   String      @db.Text
  pickupLatitude  Float
  pickupLongitude Float
  pickupTimeSlot  String?
  finalWeight     Float?
  finalValue      Float?
  createdById     String
  createdBy       User        @relation("AlertsCreatedByUser", fields: [createdById], references: [id])
  claimedById     String?
  claimedBy       CollectorProfile? @relation("AlertsClaimedByCollector", fields: [claimedById], references: [id])
  statusLogs      StatusLog[]
  review          Review?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  rejectedBy      AlertRejection[]

  // ADDED: An alert can have many problem reports
  problemReports ProblemReport[]
}

model Incentive {
    id String @id @default(cuid())
    wasteType WasteType @unique
    pricePerKg Float
    updatedAt DateTime @updatedAt
}

model AlertRejection {
    id String @id @default(cuid())
    alertId String
    alert WasteAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)
    collectorId String
    collector CollectorProfile @relation(fields: [collectorId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    @@unique([alertId, collectorId])
}

// ADDED: New model to store problem reports
model ProblemReport {
    id String @id @default(cuid())
    description String @db.Text
    status ReportStatus @default(OPEN)

    // Relation to the alert the report is about
    alertId String
    alert WasteAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)

    // Relation to the user who submitted the report
    reportedById String
    reportedBy User @relation("ReportedByUser", fields: [reportedById], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

model StatusLog {
  id        String      @id @default(cuid())
  alertId   String
  alert     WasteAlert  @relation(fields: [alertId], references: [id], onDelete: Cascade)
  status    AlertStatus
  timestamp DateTime    @default(now())
  notes     String?     @db.Text
}

model Review {
  id          String           @id @default(cuid())
  rating      Int
  comment     String?          @db.Text
  alertId     String           @unique
  alert       WasteAlert       @relation(fields: [alertId], references: [id])
  reviewerId  String
  reviewer    User             @relation("ReviewsGivenByUser", fields: [reviewerId], references: [id])
  collectorId String
  collector   CollectorProfile @relation("ReviewsReceivedByCollector", fields: [collectorId], references: [id])
  createdAt   DateTime         @default(now())
}
